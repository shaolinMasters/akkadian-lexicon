name: CI pipeline

on:
    push:
       branches: [ "main", "dev*" ]
## in case of CodeQL the branches below must be a subset of the branches above
    pull_request:
        types: [opened, synchronize, reopened]
        branches: [ "main", "dev*" ]

jobs:
    lint:
        name: Lint codebase
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout branch
                uses: actions/checkout@v3
                with:
                    # Full git history is needed to get a proper
                    # list of changed files within `super-linter`
                    fetch-depth: 0
            # super-linter is buggy on Java code, thats why we lint Java separately
            -   name: Lint Java
                uses: axel-op/googlejavaformat-action@v3
                with:
                    skip-commit: true

            -   name: Print diffs
                run: git --no-pager diff --exit-code

            -   name: Lint other (.yml)
                uses: github/super-linter/slim@v4
                env:
                    VALIDATE_ALL_CODEBASE: true
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    VALIDATE_GOOGLE_JAVA_FORMAT: true
                    VALIDATE_YAML: true
                    
    create-matrix:
        name: Check repository for languages
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.set-matrix.outputs.languages }}

        steps:
         -  name: Get languages from repo
            id: set-matrix
            uses: advanced-security/set-codeql-language-matrix@v1
            with:
                access-token: ${{ secrets.GITHUB_TOKEN }}
                endpoint: ${{ github.event.repository.languages_url }}
                    
    vulnerability_check:
        name: Vulnerability check
        needs: create-matrix
        if: ${{ needs.create-matrix.outputs.matrix != '[]' }}
        runs-on: ubuntu-latest
        permissions:
            actions: read
            contents: read
            security-events: write
        strategy:
            fail-fast: false
            matrix:
                language: ${{ fromJSON(needs.create-matrix.outputs.matrix) }}
        
        steps:
            -   name: Checkout branch
                uses: actions/checkout@v3
                with:
                    # Full git history is needed to get a proper
                    # list of changed files within `super-linter`
                    fetch-depth: 0
       
            -   name: Dependency review
                uses: actions/dependency-review-action@v2
                with:
                    base-ref: main
                    head-ref: main

            # Initializes the CodeQL tools for scanning.
            - name: Initialize CodeQL
              uses: github/codeql-action/init@v2
              with:
                  languages: ${{ matrix.language }}

            # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
            # If this step fails, then you should remove it and run the build manually (see below)
#             - name: Autobuild
#               uses: github/codeql-action/autobuild@v2
#           Manual build start   
            -   name: Set up JDK 17
                uses: actions/setup-java@v3
                with:
                    java-version: '17'
                    distribution: 'temurin'
                    cache: maven
                    
            -   name: Build
                run: mvn clean compile --file pom.xml
#           Manual build end
            - name: Perform CodeQL Analysis
              uses: github/codeql-action/analyze@v2
              with:
                  category: "/language:${{matrix.language}}"
                  
    code_style_check_and_build:
        name: Code style check and build
        needs: lint
        runs-on: ubuntu-latest

        steps:
            - name: Checkout branch
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

            -   name: Set up JDK 17
                uses: actions/setup-java@v3
                with:
                    java-version: '17'
                    distribution: 'temurin'
                    cache: maven

            - name: Cache SonarCloud packages
              uses: actions/cache@v3
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar

            - name: Cache Maven packages
              uses: actions/cache@v3
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2

            - name: Build and analyze
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                  # maven verify phase builds package also
              run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=marinchuck_test3 # set the project key
